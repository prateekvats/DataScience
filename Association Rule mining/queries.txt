/* 
Query 1 . Count the randomArrayItems.
*/

{
  "_id": "_design/RandomArrayItems",
  "_rev": "2-3fa2539d242d636c7646cb3369adf5b0",
  "views": {
    "RandomArrayItems": {
      "reduce": "function (keys, values, rereduce) {\n  return sum(values);\n}",
      "map": "function (doc) {\n  \n  for (var i = 0; i < doc.data.length; i++) { \n     emit(doc.data[i].randomArrayItem,1);\n}\n\n  \n}"
    }
  },
  "language": "javascript"
}




/* 
Query 2 . Name(s) of the person(s) with the maximum age, and their age(s) by gender and whether they are active or not.
*/


{
  "_id": "_design/MaxAge",
  "_rev": "49-5940858e78186f94333771710d806c67",
  "views": {
    "View2": {
      "map": "function (doc) {\n    for (var i = 0; i < doc.data.length; i++) { \n     var obj={\"age\":doc.data[i].age,\"names\":doc.data[i].name};\n     emit([doc.data[i].gender,doc.data[i].isActive],obj);\n  }\n}",
      "reduce": "function (keys, values, rereduce) {\n  // Return the maximum numeric value.\n    var max = -Infinity\n    var names=[];\n    for(var i in values){\n      if(values[i].age>max)\n        max=values[i].age;\n    }\n    for(var i in values){\n      if(max==values[i].age)\n        names.push(values[i].names);\n    }\n    return {\"age\":max,\"names\":names};\n\n}\n"
    }
  },
  "language": "javascript"
}




/* 
Query 3 .A count of the people by tags, that is, count all the people with the given value in the tags array.
*/


{
  "_id": "_design/PeopleCountByTags",
  "_rev": "15-1aacc95f8a3eb9c5d1b74fe95144fd61",
  "views": {
    "ByTags": {
      "map": "function (doc) {\n\n    for (var i = 0; i < doc.data.length; i++) {\n     var tags=doc.data[i].tags;\n     for(var t in tags)  \n      emit(tags[t],doc.data[i].id);\n  }\n}",
      "reduce": "_count"
    }
  },
  "language": "javascript"
}





/* 
Query 4 . The average age of people by company.
*/


{
  "_id": "_design/AverageAgeByCompany",
  "_rev": "5-002069d705e5a02ae255c14b0ed3583d",
  "views": {
    "AverageAgeByCompany": {
      "map": "function (doc) {\n   for (var i = 0; i < doc.data.length; i++) \n     emit(doc.data[i].company,doc.data[i].age);\n}",
      "reduce": "function (keys, values, rereduce) {\n  return (sum(values)/values.length).toFixed(1);\n}"
    }
  },
  "language": "javascript"
}

/* 
Query 5 . The JSON of the lattitude, longitude, and address of each employee that has a lattitude of more than 80.
*/

{
  "_id": "_design/longitudeLatitude",
  "_rev": "4-4db01c248d5bd89bf3508429c09554af",
  "views": {
    "longitudeLatitude": {
      "map": "function (doc) {\n   for (var i = 0; i < doc.data.length; i++) \n    if(doc.data[i].latitude>80)\n     emit(doc.data[i].id,{\"latitude\":doc.data[i].latitude,\"longitude\":doc.data[i].longitude,\"address\":doc.data[i].address});\n}"
    }
  },
  "language": "javascript"
}


/* 
Query 6 . Names of people and their frineds that start with the letter "J" if they have at least one friend whose name starts with the letter "J".
*/

{
  "_id": "_design/FriendsJ",
  "_rev": "35-e974fd7a98f546107a0580afaf6cf384",
  "views": {
    "FriendsJ": {
      "map": "function (doc) {\n   for (var i = 0; i < doc.data.length; i++){\n           var f=doc.data[i].friends;\n           for (var j = 0; j < f.length; j++){\n               if(f[j].name[0]=='J')\n                  emit(doc.data[i].name,f[j].name);\n           }\n           \n   }\n\n}"
    }
  },
  "language": "javascript"
}